import redis
import pdb
import threading
import datetime
import gnupg
from pathlib import Path
from configparser import ConfigParser

config = ConfigParser()
config.read('config.ini')


class getchats(threading.Thread):
    def __init__(self, chat, p):
        """Constructor which takes in the redis PubSub
        object and the name of the channel(The chat)
        """
        threading.Thread.__init__(self)
        self.chat = chat  # Name of Redis Channel/Chat
        self.p = p  # Redis PubSub object

    def run(self):
        self.p.subscribe(self.chat)  # Subscribe to Redis Channel/Chat
        for message in self.p.listen():  # Listening to on channel for new messages
            if message["type"] == 'message':  # Only listen to messages and not subscriptions
                print(str(datetime.datetime.now())+" : " +
                      message["data"].decode("utf-8"))


if __name__ == "__main__":
    # Location of keys to be used for encryption/decryption (To be made Dynamic)
    gpg = gnupg.GPG(gnupghome=str(Path.home()) + '/redischat')
    gpg.encoding = 'utf-8'
    r = redis.Redis(host=config.get("redis", "host"), port=config.get("redis", "port"),
                    db=config.get("redis", "db"))  # Connect to Redis server
    if input("Use identity from previous keys?(y/n)").upper() == "Y":
        count = 1
        for item in gpg.list_keys(True):  # Get all private keys of the user
            print(str(count) + ". " + str(item["uids"]))
            count += 1
        # Set select key as identity
        identity = gpg.list_keys(True)[int(input("Select your identity")) - 1]
        myusername = identity["uids"][0].split("<")[0].strip()
        key = identity["fingerprint"]
        ascii_armored_public_key = gpg.export_keys(key)
    else:
        myusername = input("Username:\n")
        email = input("Email Address(Optional):")
        email = email if email != "" else myusername + \
            config.get("gpg", "email_host")  # Generate an email if not used
        input_data = gpg.gen_key_input(
            key_type=config.get("gpg", "key_type"), name_email=email, name_comment="Generated by Redis Chat", name_real=myusername, key_length=config.get("gpg", "key_length"))  # Data to generate key pair
        key = gpg.gen_key(input_data)  # Generate key
        ascii_armored_public_key = gpg.export_keys(key)
    p = r.pubsub()  # Redis Pub/Sub Object
    join = {
        "username": myusername,
        "fingerprint": key,
        "pub_ascii": ascii_armored_public_key}  # User Identity in current chat session
    # Tell everyone your identity
    r.publish(config.get("redis", "joinchannel"), str(join))
    currentchat = None
    mychats = []
    while True:
        com = input("\n >")
        if com[0:5] == "/chat":
            if com[6:0] in mychats:
                currentchat = com[6:]
            else:
                # Create a new chat with that user
                chat = getchats("".join(sorted([myusername, com[6:]])), p)
                chat.start()
                currentchat = com[6:]
                mychats.append(chat)
                # Set the name of thread/Listener to identify
                chat.setName(com[6:])
        elif com[0:8] == "/mychats":
            for item in mychats:
                print(item.getName())
        elif com[0] == "/":
            print("Unknown Command")
        else:
            r.publish(
                "".join(sorted([myusername, currentchat])), myusername+" : "+com)  # Send message
